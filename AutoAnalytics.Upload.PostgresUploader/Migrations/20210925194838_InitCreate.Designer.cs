// <auto-generated />
using System;
using AutoAnalytics.Upload.PostgresConnector;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AutoAnalytics.DbUpload.DataUpload.PostgreSQL.Migrations
{
    [DbContext(typeof(dreamscape_portal_dbContext))]
    [Migration("20210925194838_InitCreate")]
    partial class InitCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "en_US.UTF-8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.HasSequence("t_group_id_sequence", "auto_analytics")
                .HasMin(0L)
                .HasMax(99999999999999999L);

            modelBuilder.Entity("AutoAnalytics.Upload.PostgresConnector.TAssocRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasIdentityOptions(null, null, 0L, 9999999999L, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CCalcDate")
                        .HasColumnType("date")
                        .HasColumnName("c_calc_date");

                    b.Property<decimal>("CLift")
                        .HasColumnType("numeric")
                        .HasColumnName("c_lift");

                    b.Property<decimal>("CReliability")
                        .HasColumnType("numeric")
                        .HasColumnName("c_reliability");

                    b.Property<long>("CSupportCount")
                        .HasColumnType("bigint")
                        .HasColumnName("c_support_count");

                    b.Property<decimal>("CSupportPerc")
                        .HasColumnType("numeric")
                        .HasColumnName("c_support_perc");

                    b.Property<long>("ConseqDetailId")
                        .HasColumnType("bigint")
                        .HasColumnName("conseq_detail_id");

                    b.Property<long>("ModelId")
                        .HasColumnType("bigint")
                        .HasColumnName("model_id");

                    b.Property<long>("ReasonDetailId")
                        .HasColumnType("bigint")
                        .HasColumnName("reason_detail_id");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint")
                        .HasColumnName("region_id");

                    b.HasKey("Id");

                    b.ToTable("t_assoc_rule", "auto_analytics");
                });

            modelBuilder.Entity("AutoAnalytics.Upload.PostgresConnector.TCrash", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasIdentityOptions(null, null, 0L, 9999999999L, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime?>("CDate")
                        .HasColumnType("date")
                        .HasColumnName("c_date");

                    b.Property<string>("CDescription")
                        .HasColumnType("text")
                        .HasColumnName("c_description");

                    b.Property<string>("CrashId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("crash_id")
                        .HasComment("ComplaintId + \" - \" + EngineNum");

                    b.Property<long>("DamageDetailId")
                        .HasColumnType("bigint")
                        .HasColumnName("damage_detail_id");

                    b.HasKey("Id");

                    b.HasIndex("DamageDetailId");

                    b.ToTable("t_crash", "auto_analytics");
                });

            modelBuilder.Entity("AutoAnalytics.Upload.PostgresConnector.TDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasIdentityOptions(null, null, 0L, 9999999999L, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("CName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_name");

                    b.Property<long>("SubgroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("subgroup_id");

                    b.HasKey("Id");

                    b.HasIndex("SubgroupId");

                    b.ToTable("t_detail", "auto_analytics");
                });

            modelBuilder.Entity("AutoAnalytics.Upload.PostgresConnector.TGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasIdentityOptions(null, null, 0L, 9999999999L, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("CName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_name");

                    b.HasKey("Id");

                    b.ToTable("t_group", "auto_analytics");
                });

            modelBuilder.Entity("AutoAnalytics.Upload.PostgresConnector.TModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasIdentityOptions(null, null, 0L, 9999999999L, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("CName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_name");

                    b.HasKey("Id");

                    b.ToTable("t_model", "auto_analytics");
                });

            modelBuilder.Entity("AutoAnalytics.Upload.PostgresConnector.TRegion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasIdentityOptions(null, null, 0L, 9999999999L, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("CName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_name");

                    b.HasKey("Id");

                    b.ToTable("t_region", "auto_analytics");
                });

            modelBuilder.Entity("AutoAnalytics.Upload.PostgresConnector.TSubgroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasIdentityOptions(null, null, 0L, 9999999999L, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("CName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_name");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("group_id");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("t_subgroup", "auto_analytics");
                });

            modelBuilder.Entity("AutoAnalytics.Upload.PostgresConnector.TCrash", b =>
                {
                    b.HasOne("AutoAnalytics.Upload.PostgresConnector.TDetail", "DamageDetail")
                        .WithMany("TCrashes")
                        .HasForeignKey("DamageDetailId")
                        .HasConstraintName("detail_dependency")
                        .IsRequired();

                    b.Navigation("DamageDetail");
                });

            modelBuilder.Entity("AutoAnalytics.Upload.PostgresConnector.TDetail", b =>
                {
                    b.HasOne("AutoAnalytics.Upload.PostgresConnector.TSubgroup", "Subgroup")
                        .WithMany("TDetails")
                        .HasForeignKey("SubgroupId")
                        .HasConstraintName("subgroup_for_detail")
                        .IsRequired();

                    b.Navigation("Subgroup");
                });

            modelBuilder.Entity("AutoAnalytics.Upload.PostgresConnector.TSubgroup", b =>
                {
                    b.HasOne("AutoAnalytics.Upload.PostgresConnector.TGroup", "Group")
                        .WithMany("TSubgroups")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("group_for_subgroup")
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AutoAnalytics.Upload.PostgresConnector.TDetail", b =>
                {
                    b.Navigation("TCrashes");
                });

            modelBuilder.Entity("AutoAnalytics.Upload.PostgresConnector.TGroup", b =>
                {
                    b.Navigation("TSubgroups");
                });

            modelBuilder.Entity("AutoAnalytics.Upload.PostgresConnector.TSubgroup", b =>
                {
                    b.Navigation("TDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
